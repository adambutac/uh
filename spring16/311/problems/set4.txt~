                                                            Adam Butac
                                                            02.14.16
                                                            ICS 311

                            Problem Set 4
-----------------------------------------------------------------------

#1. Peer Credit Assignment
    
    For 2/9 2/11
    
    Garrett 2
    Jon     2
    Azad    2    

#2. Master Method Practice (6 pts)
    
    (a) T(n) = 2T(n/4) + sqrt(n)

        In this equation: a = 2, b = 4, and f(n) = sqrt(n) or n^1/2

        For this T(n), Case 2 of the Master Theorm is the best fit
        since 

            log4(2) = 1/2
            n^1/2 = n^(log4(2))
        
        therefore

            T(n) = Θ( (n^1/2) * lg(n) )

    (b) T(n) = 3T(n/9) + n

        In this equation: a = 3, b = 9, and f(n) = n, or n^1 

        For this T(n), Case 3 of the Master Theorm is the best fit
        because

            log9(3) = 1/2

        so then

            n^1 = n^(log9(3) + ε), where ε = 1/2 
        
        and also
        
            3f(n/9) <= c*f(n) for some constant c < 1
            3n/9 <= c*n
            n/3 <= c*n where c <= 1/3 which satisfies c < 1, for all
            sufficently large n.

        therefore
            
            T(n) = Θ(f(n)) or Θ(n)

    (c) T(n) = 7T(n/3) + n

        In this equation: a = 7, b = 3, and f(n) = n
                
        For this T(n), Case 1 of the Master Theorm is the best fit
        because

            f(n) = n^1, and log3(7) > 1 so we must find an ε > 0 so that

            log3(7) - ε = 1
            ε = log3(7) - 1
            ε = 0.7712 ... > 0
        
        Therefore, 

            T(n) = Θ(n^log3(7)) = Θ(n^1.7712...)

#3. Substitution (7 pts)

    (a) T(n) = 7T(n/3) + n
        
        1. T(n) = Θ(n^log3(7))

        2. T(k) = ck^log3(7) + k for all k < n
            use k = n/3    

        T(n) = 7T(n/3) + n
             = 7( c(n/3)^log3(7) + n/3 ) + n
             = 7c(n/3)^log3(7) + n/3 + n
             = 7c(n/3)^log3(7) + 2n/3
    
        This proof fails here because it has an extra 2n/3 term.

    (b) Redo with - dn

        1. T(n) = Θ(n^log3(7)) - dn

        2. T(k) = c^klog3(7) + k  - dk for all k < n
            use k = n/3

        T(n) = 7T(n/3) + n
             = 7( c(n/3)^log3(7) + n/3 - dn/3 ) + n
             = 7c(n/3)^log3(7) + 7n/3 - 7dn/3 + n

                solving for d
                    7/3 - 7d/3 + 3/3 = - 1
                    7 - 7d + 3 = - 3
                    10 - 7d = - 3
                    10 + 3 = 7d
                    13 = 7d
                    13/7 = d
                    
             = 7c(n/3)^log3(7) - n

#4. Binary Search Tree Proof (7 pts)

    (a)
        IF S was an ancestor or cousing of X, there would
        exist, a loop in the graph. Since binary trees do
        not allow loops by definition, S must be in a 
        subtree rooted at X.
    (b)
        IF S is a sucessor of X, it must be greater than X,
        therefore it must exist in the right subtree of X. 
        If it were in the left subtree of X, the binary
        search tree property would not hold true.
    (c)
       If S has a left child, that means that there is a
       node n that is less than S, but greater than X. 
       So if X has a left subtree, and S has a left node
       X < N < S, and S replaces X, N would have to be
       in the right subtree, and N < S, so the BST 
       property no longer holds true.
    (d)
       For the predecessor, replace left with right,
       right with left, and < with >.

#5. Deletion in Binary Search Trees (3 pts)
  
    (a) 
        The code assumes the successor is the left most leaf in the
        right subtree, when z.left and z.right are not NIL.
    (b)
        TREE-DELETE(T, z)
        1 if z.left == NIL
        2   TRANSPLANT(T, z, z.right)
        3 elseif z.right == NIL
        4   TRANSPLANT(T, z, z.left)
   >>>> 5 else y = TREE-MAXIMUM(z.left) //predecessor 
        6   if y.p != z
        7       TRANSPLANT(T, y, y.right)
        8       y.right = z.right
        9       y.right.p = y
        10  TRANSPLANT(T, z, y)
        11  y.left = z.left
        12  y.left.p = y
   
#6. Constructing Balanced Binary Search Trees (7 pts)

    (a)
        TreeNode BST_Const(Array[] a, TreeNode root){

            if(a.length > 0){
                root = new TreeNode();
                root.key = a[a.length/2];
                root.left = BST_Const(
                    a.subarray(0,a.length/2 - 1), root.left);
                root.right = BST_Const(
                    a.subarray(a.length/2, a.length - 1), root.right);
            }
            return root;
        }

    (b)
         I would estimate a cost of Θ(n), as each node must be created.
    (c)
        The expected runtime of BinarySearch is Θ(log(n)), regardless of the
        implementation of the data structure.
