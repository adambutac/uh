                                                            Adam Butac
                                                            03.15.16
                                                            ICS 311

                            Problem Set 7
-----------------------------------------------------------------------

#1. Peer Credit Assignment
    
    Tyler Aratani 2 
    Nicole Hanabusa 2
    Cal Maruyama 1

#2. Constructing and Extracting the Solution for Longest Path (10) 

    a) Rewrite LongestPathValueMemoized to LongestPathMemoized

        Longest-Path-Memoized(G, u, t, dist, next[1..|V|])
            if u = t
                return 0;
            if dist[u] > -inf
                return dist[u] 
            else
                for each v in G.Adj[u]
                    alt = w(u,v) + Longest-Path-Memoized(G, v, t, dist, next) 
                    if dist[u] < alt
                        dist[u] = alt
                        next[u] = v
                return dist[u]
    
    b) Longest-Path-Memoized-Recovery(G, s, t, dist, next)
            Longest-Path-Memoized(G, s, t, dist, next)  
            for each v in next
                if v != 1
                    print v
    c)
        Initializing dist and next will be Θ(|V| + |E|), since there are 
        |V| vertices and |E| edges. At worst case, we must be able to store 
        them all.

        Longest-Path-Memoized() must trace through every possible path from s,
        to t, giving a runtime complexity of O(|V| + |E|) when observing all 
        verticies and edges in the graph G. 

        Longest-Path-Memoized-Recovery() loops over all elements in next and 
        calls Longest-Path-Memoized() so total runtime will be

            O( 3|V| + 2|E| ) which is still O( |V| + |E|) 

    d)
        User space would be Θ( |V| + |E| ) for the two arrays.
        
#3. LCS by Suffix (15)
    a)
        1. If x1 = y1, then z1 = x1 = y1, and Z1 is an LCS of X1 and Y1
        3. If x1 != y1, then z1 != x1 -> Z is an LCS of X1 and Y
        4. If x1 != y1, then z1 != y1 -> Z is an LCS of X and Y1
    b)
        Define c[i,j] = length of LCS of Xi and Yj. We want to find
        c[1, 1].

                    { 0                             if i = m or j = n
        c[i,j] =    { c[i+1, j+1] + 1               if i < m , j < n and xi =yj
                    {max( c[i+1, j], c[i, j+1] )    if i < m , j < n and xi ≠yj 
    
    c) LCS-Length(X,Y)
            m = X.length
            n = Y.length
            let b[1..m,1..n] and c[0..m,0..n] be new tables
            for i = m-1 to 0
                c[i,0] = 0
            for j = n-1 to 0
                c[0,j] = 0
            for i = m-1 to 0
                for j = n-1 to 0
                    if xi == yi
                        c[i,j] = c[i+1,j+1] + 1
                        b[i,j] = "down right"
                    else if c[i+1, j] >= c[i, j+1]
                        c[i,j] = c[i+1,j]
                        b[i,j] = "down"
                    else c[i,j] = c[i, j+1]
                        b[i,j] = "right"
            return c and b 
    d)  LCS(b,X,m,n)
            i,j,k = 0
            V = a new vector
            while i < m and j < n
                if b[m,n] == "down right"
                    i += 1
                    j += 1
                    V[k] = Xi
                    k += 1
                else if b[i,j] == "down" 
                    i += 1
                else
                    j += 1
            return V
#4  Activity Scheduling with Revenue (15) 
        a)
            An optimal solution would return a maximum set of
            mutually compatable activities in Sij. We divide 
            the optimal solution into two subproblems using an
            activity Ak. We must then find mutually compatable 
            activities in the subsets Sik (activities that 
            start after some activity Ai finishes and end before
            the start of Ak), and Skj (acitivities that start
            after Ak and end before some activity Aj).

        b)
            val[i,j]=val[i,k] + val[k,j] + 1

        c)
            Schedule-Activity(a, f, s, 
                              val[0.. n+1,0..n+1], 
                              activity[0..n+1,0..n+1])
        d)
        e)
