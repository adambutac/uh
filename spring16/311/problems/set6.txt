                                                            Adam Butac
                                                            03.08.16
                                                            ICS 311

                            Problem Set 6
-----------------------------------------------------------------------

#1. Peer Credit Assignment
    
    For 3/01 3/03
    
    April Rose De Vera 2 
    Joshua Wadsak-Myers 2
    Crhis Yeager 2

#2. Red-Black Tree and (2,4)-Tree Deletion (12)
    a)
    b)
    c)
   
#3. Red-Black Tree Height (6)
    a) What is the largest number of internal nodes in a red-
    black tree with black height k? 
        
        The largest number of internal nodes would be the same
        as if it were a complete binary tree. The one 
        difference is that the height of the red-black tree is
        expressed as the "black height." Also, the internal
        property guarentees that the red-black tree would need
        alternating colors so that all nodes at an even height 
        (root at 0) would be black, and all nodes at an odd 
        height would be red. 
        
        Therefore, a red-black tree with the maximum number of
        internal nodes would have a black height equal to half 
        of its complete binary tree counterpart would be.

        So, counting both the root and leaf as part of the
        black height we get the following expression.

        2^(2(k-1)) - 1  for k > 1

    b)
        The smallest number of internal nodes would be what I
        invision as a "linear" tree, where there is a single
        path from the root to the lowest node in the tree.

        This implies that the number of internal nodes is equal
        to the black height, minus the lowest row containing the
        two leaves.
        
        k - 1 for k > 1

#4 Red Nodes in Red-Black Tree (2)

    To summerize, since in each if clause there is a node set
    to red, we know there must be at least one red node that 
    exists in the tree.

    In RB-InsertFixup(T,z) the loop at line 1 will
    only exit when node z's parent is black.

    The if at line 2 only changes whether z's parent is a left
    or right child, and so it can be ignored.

    The important lines are at 4 and 9.

    if z's parents sibling is red, then z's parent is black,
    z's parents sibling is black, and z's grandparent is red.
    Most importantly, line 7 sets "some node" to red.
    At this point we know that there is at least one red
    node, and the loop will exit on its next turn.
    
    The else if, line 9, checks if z is a right child.
    Again, z's parent is set to black, z's grandparent is set
    to red, and we know that there is at least one red node,
    and on the next iteration the loop will exit.


    
    #5 Sorting Larger Numbers (10)
    a)
        In this case, counting sort would not be viable since
        k is not constant. It depends on n, such that
        
        k = n^4

        The runtime then becomes Θ(n + n^4) >> Θ(n)
    b)
        In Radix sort k can be 0-9, and d is the number of digets of n^4 - 1

        Θ(d(n + k)) = Θ(d(n + 10)) >> Θ(n)
    c)
        
