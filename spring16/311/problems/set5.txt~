                                                            Adam Butac
                                                            03.01.16
                                                            ICS 311

                            Problem Set 5
-----------------------------------------------------------------------

#1. Peer Credit Assignment
    
    For 2/17 2/24
    
    Eugene Lao 2
    Sean Shimoda 2
    Jon Hsu 2    

#2. Analysis of d-ary heaps (11 pts)
   a)
        Assuming the root is at index 1, like the lecure notes...

        Jth-Child(i,j) = d(i-1) + 2 + j | where 0 <= j <= d-1
        D-Ary-Parent(i) = floor( (j-2)/d ) + 1
        
        Quint-Ary-Child(1,5) = 5(1-1) + 2 + 5 = A[5]
        Quint-Ary-Parent(5) = floor( (5-2)/5 ) + 1 = 1
    
    b)
        The height would be log-d(n)
        The difference would be log2(n) - log-d(n) for d >= 2

    c), d)
        
        I'm not sure how to implement a more efficent algorithm
        than what is already supplied in the lecture notes.
        
        HEAP-MAX-EXTRACT and MAX-HEAP-INSERT would be 
        O(log-d(n)) which is still in the order of O(log(n))
    
#3. Tracing Quicksort(12 pts)

    a)
        Continuing where the problem left off...

        A = [1, 2, 6, 8, 3, 9, 4, 7, 5], i=2, j=4, no exchange

        A = [1, 2, 3, 8, 6, 9, 4, 7, 5], i=3, j=5, exchanged A[3] with A[5] 

        A = [1, 2, 3, 8, 6, 9, 4, 7, 5], i=3, j=6, no exchange 

        A = [1, 2, 3, 4, 6, 9, 8, 7, 5], i=4, j=7, exchanged A[4] with A[7] 

        A = [1, 2, 3, 4, 6, 9, 8, 7, 5], i=4, j=8, no exchange 

        After the swap in line 7: 
        
        A = [1, 2, 3, 4, 5, 9, 8, 7, 6], i=4, j=8, exchanged A[5] with A[9] 

        Partition(A, 1, 9) returns 5

        #2 A[1,3]
        #3 A[5,9]

    b)
        Initially:
        A = [1, 2, 3, 4, 5, 9, 8, 7, 6], i=0, j=1, pivot = A[r] = A[4] = 4 

        A = [1, 2, 3, 4, 5, 9, 8, 7, 6], i=1, j=1, exchanged A[1] with A[1] 

        A = [1, 2, 3, 4, 5, 9, 8, 7, 6], i=2, j=2, exchanged A[2] with A[2] 

        A = [1, 2, 3, 4, 5, 9, 8, 7, 6], i=3, j=3, exchanged A[3] with A[3] 

        After the swap in line 7:

        A = [1, 2, 3, 4, 5, 9, 8, 7, 6], i=3, j=3, exchanged A[4] with A[4] 

        Partition(A,1,4) returns 4

    c) 
        Initially:
        A = [1, 2, 3, 4, 5, 9, 8, 7, 6], i=5, j=5, pivot = A[r] = A[9] = 6 

        A = [1, 2, 3, 4, 5, 9, 8, 7, 6], i=5, j=6, no exchange 

        A = [1, 2, 3, 4, 5, 9, 8, 7, 6], i=5, j=7, no exchange 

        After the swap in line 7:

        A = [1, 2, 3, 4, 5, 6, 8, 7, 9], i=5, j=8, exchanged A[6] with A[9] 

        Partition(A,6,9) returns 6

    d)
        I see a lot of redundant checks and unnessesary swaps.
        These certianly affect the runtime of quicksort in a negative way.    
    
#4. 3-way Quicksort (10 pts)

    3WayPartition(A,p,r)
