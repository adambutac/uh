                                                            Adam Butac
                                                            01.26.16
                                                            ICS 311

                            Problem Set 1
-----------------------------------------------------------------------

#1. Peer Credit Assignment

    4 Marco de Lannoy Kobayashi
        Very engaged in the classwork.
    2 Azad AbdelJawad
        Mostly confused, but still participated somewhat.
    0 Tyler Aratani
        Did not even bring something to write with; quiet and seemingly
        uninterested.

#2 Correctness of Linear Search

(a) Show pseudocode for Linear Search.

0   //From CLRS page 18.
1   for j = 2 to A.length
2       key = A[j]
3       // Insert A[j] into the sorted sequence A[1]..j - 1].
4       i = j - 1
5       while i > 0 and A[i] > key
6           A[i + 1] = A[i]
7           i = i - 1
8       A[i + 1] = key

(b) Using a loop invariant, prove that your algorithm is correct.

    Loop invariant:

        For each for loop from lines 1-8, the subarray 
    A[1..j - 1] contains the elements originally in A[1..j - 1]
    in sorted order.

    Initialization:

        Before the first loop, the subarray A[1...j - 1]
    contains a single element, satisfying the condition of 
    being sorted.

    Maintenance:
        
        Firstly, the variable key is set to A[j]. key is the
    element we are trying to put into the sorted array. 
        For every j > 2 up to A.length, the inner while loop 
    (line 5-7) searches for the condition that A[i] is greater
    than key, where i is the current index in the sorted 
    subarray. While A[i] <= key,the element at A[i] is shifted
    1 position to the right, and the index is shifted 1 
    position to the left. The loop terminates once the key
    is greater than the element at A[i], or the end of the 
    array is reached.
        When the while loop terminates, A[i] is greater
    than key, and key is then placed to the right of A[i]. 
    In the case that the while loop terminates when i = 0,
    key is placed to the beginning of the array (i + 1). 
   
    Termination:

        The for loop (line 1) will terminate when j > A.length.
    Each iteration of the loop increments j by 1, and j is never
    decremented, therefore j will eventually be > A.length, 
    and the loop will terminate. 

#3. Runtime of BinarySearch

(a) Write the recurrence relation for BinarySearch.
   
    T(n) = { 
             c         if n = 1,
             c*log(n)  if n > 1. 
           }

(b) Draw the recursion tree for BinarySearch

                             c              1
                          /    \
                        c        c          2
                     /    \    /    \
                    c      c  c      c      4
                    |      |  |      |      8
                    |      |  |      |      16
                    |      |  |      |      32
                    c      c  c      c ...  2^(h), where h is the height

(c) Use the Tree to show that BinarySearch is theta(lg(n)) in the worst case.
    1. Show what the row totals are.

    2. Write an expression for the tree height (justify)

        As the tree grows exponentially, the height grows by log2(n).
        So the height = floor(log2(n))
 
    3. Use this information to determine the total computation represented by
       the tree.
    
        Since the height grows by log2(n), and a binary search tree is
        traversed downward, the number of comparisons needed would be
        equal to the height of the element being searched. Therefore
        the total computation would be for all cases, log(n).

#4. Correctness of BubbleSort

(a) Precisely state a  loop invariant for the for loop in lines 2-4.
    Prove that it holds.

    Loop Invariant:
            For each loop in lines 2-4, A is "more sorted", or
        remains the same. To elaborate, "more sorted" means 
        that if A[j] < A[j - 1] is true, they are swapped, and
        A is now "more sorted", otherwise it remains the same.
        
    Initialization:
            Before the first loop, the array remains the same,
        so our loop invariant condition of remaining the same is
        satisfied. 

    Maintenance:
            For each outer loop from i = 1 to A.length - 1, the 
        inner loop iterates from the end of the array, to i + 1.
        As long as the element at A[j] >= A[j - 1], the array
        stays the same. Otherwise the elements swap positions,
        leaving the array in a more sorted state. 
            In the inner loop, the values of A from j down to 
        i + 1 are sorted by line 3 and 4. So when the inner
        loop terminates, that subset of the array is sorted.
        Once i is incremented however, we must run through
        all elements again to be sure that everything is sorted.
 
    Termination:
            The two loops are for loops, iterating over a
        non increasing (and for the case of the inner loop, a
        decreasing) range, and for each iteration their
        variables i,j respectively, are incremented. 
        Therefore there exists a point where both for loops 
        will terminate, and A will be sorted.

(b) Using the termination condition of the loop invariant, state a loop
    invariant for the for loop in lines 1-4 that will prove the 
    inequality A'[1] <= A'[2] <= A'[3] ... <= A'[n-1] <= A'[n] 
   
            In the inner loop, the values of A from j down to 
        i + 1 are sorted by line 3 and 4. So when the inner
        loop terminates, that subset of the array is sorted.
        Once i is incremented however, we must run through
        all elements again to be sure that everything is sorted.
        Eventually we will reach the end of the for loop, and
        the array will be in a sorted state.
 
    
(c) What is the worst-case running time of BubbleSort? Comare to
    InsertionSort.

    The worst case runtime of BubbleSort = O(n^2)
    The worst case runtime of InsertionSort = O(n^2)
    
